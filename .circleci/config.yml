version: 2.1
orbs: 
  slack: circleci/slack@4.10.1
  aws-cli: circleci/aws-cli@3.1
  kubernetes: circleci/kubernetes@1.0.0

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo 'destroy'
  
jobs:
  build-app:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Application build
          command: |
            cd helloworld
            npm install
      - save_cache:
          paths: [helloworld/node_modules]
          key: helloworld-{{ checksum "helloworld/package.json" }}
      - slack/notify:
          event: fail
          template: basic_fail_1
  
  scan-app:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
            - helloworld-{{ checksum "helloworld/package.json" }}
            - helloworld-
          
      - run:
          name: scan-app run
          command: |
            echo {checksum "helloworld/packages.json"}
            cd helloworld
            npm install
            npm audit --audit-level=critical

  create-kubernetes-cluster:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
      - run:
          name: Install eksctl
          command: |
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            mv /tmp/eksctl /usr/local/bin
          
      - run:
          name: Create kubernetes cluster
          command: |
            eksctl create cluster --name=eksctl-capstone --region=us-east-1 --zones=us-east-1a,us-east-1b
        
  deploy-app:
    docker:
      - image: cimg/base:2021.04
        auth:
          username: $DOCKER_USER
          password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      - aws-cli/setup
      - add_ssh_keys:
          fingerprints: ["e4:1f:85:37:88:8f:00:35:d6:88:31:d0:df:f3:35:b1"]
      - setup_remote_docker:
          version: 20.10.14 
          docker_layer_caching: true
          
      - kubernetes/install-kubectl
            
      - run:
          name: Linting Dockerfile
          command: |
            docker run --rm --interactive hadolint/hadolint < Dockerfile
      
      - run:
          name: Containerize Application
          command: |
            docker build -t udacitycapstone .
            docker image ls
            
      - run:
          name: Containerize Application
          command: |
            dockerpath="$DOCKER_USER/udacitycapstone:latest"
            echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKER_USER" --password-stdin
            docker tag udacitycapstone $dockerpath
            docker push $dockerpath
      - run:
          name: Deploy to Kubernete cluster
          background: true
          command:  |
            dockerpath="$DOCKER_USER/udacitycapstone:latest"
            aws eks --region us-east-1 update-kubeconfig --name eksctl-capstone
            export KUBECONFIG=/home/circleci/.kube/config
            kubectl run udacitycapstone --image=$dockerpath --port=80 --labels app=udacitycapstone --restart=Never
            kubectl wait --for=condition=ready pod --all
            kubectl port-forward udacitycapstone 8000:80
      
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

workflows:
  default:
    jobs:
      - build-app
      - scan-app:
          requires: [build-app]
      - create-kubernetes-cluster:
          requires: [scan-app]
          filters:
            branches:
              only: [main]
      - deploy-app:
          requires: [scan-app, create-kubernetes-cluster]
